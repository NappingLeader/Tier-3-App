pipeline {
    agent {
        docker {
            image 'docker:24.0.6-dind'
            args '-u 0 -v /var/run/docker.sock:/var/run/docker.sock --dns=8.8.8.8'
        }
    }

    environment {
        DOCKER_CONFIG = "${env.WORKSPACE}/.docker"
        REGISTRY = 'docker.io/docker754/cartservice'
        DOCKER_CREDENTIALS_ID = 'docker-creds'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: 'main']],
                    userRemoteConfigs: [[url: 'https://github.com/NappingLeader/Tier-3-App.git']]
                ])
            }
        }

        stage('Build & Test Services') {
            parallel {
                stage('cart') {
                    steps {
                        dir('three-tier-architecture-demo/cart') {
                            script {
                                sh """
                                    docker build \
                                        --no-cache \
                                        -t $REGISTRY:latest \
                                        --label "build_number=${BUILD_NUMBER}" \
                                        .
                                """
                            }
                        }
                    }
                }
            }
        }

        stage('Push to Registry') {
            steps {
                withCredentials([[
                    $class: 'UsernamePasswordMultiBinding',
                    credentialsId: env.DOCKER_CREDENTIALS_ID,
                    usernameVariable: 'DOCKER_USERNAME',
                    passwordVariable: 'DOCKER_PASSWORD'
                ]]) {
                    script {
                        sh """
                            echo "$DOCKER_PASSWORD" | docker login \
                                -u "$DOCKER_USERNAME" \
                                --password-stdin
                            docker push $REGISTRY:latest
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            sh 'docker logout'
        }
        success {
            echo "✅ Success! Image pushed to: ${REGISTRY}:latest"
        }
        failure {
            echo '❌ Pipeline failed - check logs above'
        }
    }
}
